// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit ).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddCard } from "./add_card_reducer.ts";
export { AddCard };
import { ClientConnect } from "./client_connect_reducer.ts";
export { ClientConnect };
import { ClientDisconnect } from "./client_disconnect_reducer.ts";
export { ClientDisconnect };
import { CompleteCard } from "./complete_card_reducer.ts";
export { CompleteCard };
import { CreateBoard } from "./create_board_reducer.ts";
export { CreateBoard };
import { RollupMetrics } from "./rollup_metrics_reducer.ts";
export { RollupMetrics };

// Import and reexport all table handle types
import { BoardTableHandle } from "./board_table.ts";
export { BoardTableHandle };
import { CardTableHandle } from "./card_table.ts";
export { CardTableHandle };
import { CollaboratorTableHandle } from "./collaborator_table.ts";
export { CollaboratorTableHandle };
import { MetricTableHandle } from "./metric_table.ts";
export { MetricTableHandle };
import { MetricTimerTableHandle } from "./metric_timer_table.ts";
export { MetricTimerTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { Board } from "./board_type.ts";
export { Board };
import { Card } from "./card_type.ts";
export { Card };
import { Collaborator } from "./collaborator_type.ts";
export { Collaborator };
import { Metric } from "./metric_type.ts";
export { Metric };
import { MetricTimer } from "./metric_timer_type.ts";
export { MetricTimer };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    board: {
      tableName: "board",
      rowType: Board.getTypeScriptAlgebraicType(),
      primaryKey: "boardId",
      primaryKeyInfo: {
        colName: "boardId",
        colType: Board.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    card: {
      tableName: "card",
      rowType: Card.getTypeScriptAlgebraicType(),
      primaryKey: "cardId",
      primaryKeyInfo: {
        colName: "cardId",
        colType: Card.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    collaborator: {
      tableName: "collaborator",
      rowType: Collaborator.getTypeScriptAlgebraicType(),
    },
    metric: {
      tableName: "metric",
      rowType: Metric.getTypeScriptAlgebraicType(),
      primaryKey: "day",
      primaryKeyInfo: {
        colName: "day",
        colType: Metric.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    metric_timer: {
      tableName: "metric_timer",
      rowType: MetricTimer.getTypeScriptAlgebraicType(),
      primaryKey: "timerId",
      primaryKeyInfo: {
        colName: "timerId",
        colType: MetricTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: User.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    AddCard: {
      reducerName: "AddCard",
      argsType: AddCard.getTypeScriptAlgebraicType(),
    },
    ClientConnect: {
      reducerName: "ClientConnect",
      argsType: ClientConnect.getTypeScriptAlgebraicType(),
    },
    ClientDisconnect: {
      reducerName: "ClientDisconnect",
      argsType: ClientDisconnect.getTypeScriptAlgebraicType(),
    },
    CompleteCard: {
      reducerName: "CompleteCard",
      argsType: CompleteCard.getTypeScriptAlgebraicType(),
    },
    CreateBoard: {
      reducerName: "CreateBoard",
      argsType: CreateBoard.getTypeScriptAlgebraicType(),
    },
    RollupMetrics: {
      reducerName: "RollupMetrics",
      argsType: RollupMetrics.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.2.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddCard", args: AddCard }
| { name: "ClientConnect", args: ClientConnect }
| { name: "ClientDisconnect", args: ClientDisconnect }
| { name: "CompleteCard", args: CompleteCard }
| { name: "CreateBoard", args: CreateBoard }
| { name: "RollupMetrics", args: RollupMetrics }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addCard(boardId: bigint, title: string) {
    const __args = { boardId, title };
    let __writer = new BinaryWriter(1024);
    AddCard.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddCard", __argsBuffer, this.setCallReducerFlags.addCardFlags);
  }

  onAddCard(callback: (ctx: ReducerEventContext, boardId: bigint, title: string) => void) {
    this.connection.onReducer("AddCard", callback);
  }

  removeOnAddCard(callback: (ctx: ReducerEventContext, boardId: bigint, title: string) => void) {
    this.connection.offReducer("AddCard", callback);
  }

  onClientConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientConnect", callback);
  }

  removeOnClientConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientConnect", callback);
  }

  onClientDisconnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientDisconnect", callback);
  }

  removeOnClientDisconnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientDisconnect", callback);
  }

  completeCard(cardId: bigint) {
    const __args = { cardId };
    let __writer = new BinaryWriter(1024);
    CompleteCard.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CompleteCard", __argsBuffer, this.setCallReducerFlags.completeCardFlags);
  }

  onCompleteCard(callback: (ctx: ReducerEventContext, cardId: bigint) => void) {
    this.connection.onReducer("CompleteCard", callback);
  }

  removeOnCompleteCard(callback: (ctx: ReducerEventContext, cardId: bigint) => void) {
    this.connection.offReducer("CompleteCard", callback);
  }

  createBoard(slug: string, title: string) {
    const __args = { slug, title };
    let __writer = new BinaryWriter(1024);
    CreateBoard.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CreateBoard", __argsBuffer, this.setCallReducerFlags.createBoardFlags);
  }

  onCreateBoard(callback: (ctx: ReducerEventContext, slug: string, title: string) => void) {
    this.connection.onReducer("CreateBoard", callback);
  }

  removeOnCreateBoard(callback: (ctx: ReducerEventContext, slug: string, title: string) => void) {
    this.connection.offReducer("CreateBoard", callback);
  }

  rollupMetrics(timerId: MetricTimer) {
    const __args = { timerId };
    let __writer = new BinaryWriter(1024);
    RollupMetrics.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("RollupMetrics", __argsBuffer, this.setCallReducerFlags.rollupMetricsFlags);
  }

  onRollupMetrics(callback: (ctx: ReducerEventContext, timerId: MetricTimer) => void) {
    this.connection.onReducer("RollupMetrics", callback);
  }

  removeOnRollupMetrics(callback: (ctx: ReducerEventContext, timerId: MetricTimer) => void) {
    this.connection.offReducer("RollupMetrics", callback);
  }

}

export class SetReducerFlags {
  addCardFlags: CallReducerFlags = 'FullUpdate';
  addCard(flags: CallReducerFlags) {
    this.addCardFlags = flags;
  }

  completeCardFlags: CallReducerFlags = 'FullUpdate';
  completeCard(flags: CallReducerFlags) {
    this.completeCardFlags = flags;
  }

  createBoardFlags: CallReducerFlags = 'FullUpdate';
  createBoard(flags: CallReducerFlags) {
    this.createBoardFlags = flags;
  }

  rollupMetricsFlags: CallReducerFlags = 'FullUpdate';
  rollupMetrics(flags: CallReducerFlags) {
    this.rollupMetricsFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get board(): BoardTableHandle {
    return new BoardTableHandle(this.connection.clientCache.getOrCreateTable<Board>(REMOTE_MODULE.tables.board));
  }

  get card(): CardTableHandle {
    return new CardTableHandle(this.connection.clientCache.getOrCreateTable<Card>(REMOTE_MODULE.tables.card));
  }

  get collaborator(): CollaboratorTableHandle {
    return new CollaboratorTableHandle(this.connection.clientCache.getOrCreateTable<Collaborator>(REMOTE_MODULE.tables.collaborator));
  }

  get metric(): MetricTableHandle {
    return new MetricTableHandle(this.connection.clientCache.getOrCreateTable<Metric>(REMOTE_MODULE.tables.metric));
  }

  get metricTimer(): MetricTimerTableHandle {
    return new MetricTimerTableHandle(this.connection.clientCache.getOrCreateTable<MetricTimer>(REMOTE_MODULE.tables.metric_timer));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
